// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                     String         @id @default(uuid())
  firstName              String              
  lastName               String              
  username               String         @unique
  email                  String         @unique
  password               String     
  avatarImage            String?           
  coverImage             String?          
  bio                    String?            
  googleId               String?
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt

  posts                  Post[]
  replies                Reply[]
  followers              Follow[]       @relation("follower")
  followings             Follow[]       @relation("following")
  likes                  Like[]
  messages               Message[]
  conversations          Conversation[] @relation("ConversationParticipants")
  notificationsSent      Notification[] @relation("NotificationSender")
  notificationsReceived  Notification[] @relation("NotificationRecipient")
  
  @@index([username, email])
  @@map("users")
}

model Post {
  id            String    @id @default(uuid())
  text          String?   @db.VarChar(500)
  images        String[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String

  likes         Like[]
  replies       Reply[]

  @@index([userId])
  @@unique([createdAt, id])
  @@map("posts")
}

model Reply {
  id            String    @id @default(uuid())
  text          String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  
  post          Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId        String
  
  likes         Like[]
  notifications Notification[]
  
  @@index([postId])
  @@index([userId])
  @@map("replies")
}

model Follow {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
    
  follower      User      @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId    String
  
  following     User      @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId   String

  notifications Notification[]

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
  @@map("follows")
}

model Like {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
    
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
      
  post          Post?      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId        String?

  reply         Reply?     @relation(fields: [replyId], references: [id], onDelete: Cascade)
  replyId       String?

  notifications Notification[]

  @@unique([userId, postId]) 
  @@unique([userId, replyId])
  @@map("likes")
}

model Conversation {
  id            String     @id @default(uuid()) 
  lastMessage   Json? 
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  
  participants  User[]     @relation("ConversationParticipants")
  messages      Message[]

  @@map("conversations")
}

model Message {
  id              String       @id @default(uuid())
  text            String?   
  seen            Boolean      @default(false)
  image           String?      
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId  String
  
  sender          User         @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId        String
  
  @@index([conversationId])
  @@index([senderId])
  @@map("messages")
}




model Notification {
  id           String           @id @default(uuid())
  type         NotificationType
  message      String
  isRead       Boolean          @default(false)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
    
  sender       User             @relation("NotificationSender", fields: [senderId], references: [id], onDelete: Cascade)
  senderId     String    
  recipient    User             @relation("NotificationRecipient", fields: [recipientId], references: [id], onDelete: Cascade)
  recipientId  String

  reply        Reply?           @relation(fields: [replyId], references: [id], onDelete: Cascade)
  replyId      String?    

  follow       Follow?          @relation(fields: [followId], references: [id], onDelete: Cascade)
  followId     String?   

  like         Like?            @relation(fields: [likeId], references: [id], onDelete: Cascade)
  likeId       String?

  @@index([recipientId])                  
  @@index([recipientId, isRead])          
  @@index([recipientId, createdAt])       
  @@index([senderId])                    
  @@index([createdAt])                    

  @@index([likeId])
  @@index([followId])
  @@index([replyId])
  @@map("notifications")
}

enum NotificationType {
  LIKE_POST
  LIKE_REPLY
  REPLY
  FOLLOW
}


